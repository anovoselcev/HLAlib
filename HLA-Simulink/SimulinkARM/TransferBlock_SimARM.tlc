%% file : TransferBlock_SimARM.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for TransferBlock_SimARM
%% 
%% Simulink version      : 10.1 (R2020a) 18-Nov-2019
%% TLC file generated on : 29-Jan-2021 08:28:10

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'TransferBlock_SimARM';
     def.OutputFcnSpec = 'void Output_Point_ModelARM(double u1[1], double u2[1])';
     def.StartFcnSpec = 'void Start_Point_ModelARM()';
     def.TerminateFcnSpec = 'void Terminate_Point()';
     def.HeaderFiles = {'Wrapper.hpp', 'SimFederate.hpp'};
     def.SourceFiles = {'Wrapper.cpp', 'SimFederate.cpp'};
     def.HostLibFiles = {'HLAlib.lib', 'libfedtime1516e.lib', 'librti1516e.lib', 'rtiexec.lib', 'tbb12.lib'};
     def.IncPaths = {'C:\HLA\laboratory\', 'C:\HLA\laboratory\HLAdata/', 'C:\HLA\laboratory\HLA-Simulink/SimulinkARM/SimFederate/', 'C:\HLA\rrti-2.0\RRTI-2.0.0164\include/HLA2010', 'C:\HLA\laboratory\3dparty/magic_get-develop/include'};
     def.SrcPaths = {'C:\HLA\laboratory\', 'C:\HLA\laboratory\/HLA-Simulink/SimulinkARM/SimFederate/'};
     def.LibPaths = {'C:\HLA\rrti-2.0\RRTI-2.0.0164\bin/', 'C:\HLA\laboratory\lib/windows/', 'C:\HLA\laboratory\/3dparty/tbb/lib/intel64/vc14\'};
     def.Options.language = 'C++';
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements TransferBlock_SimARM "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C++
    %if ::GenCPP==0 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C++ Target Language")>
    %endif

    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign hFileName = FcnGenerateUniqueFileName("TransferBlock_SimARM_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern void TransferBlock_SimARM_wrapper_Start(void);
        extern void TransferBlock_SimARM_wrapper_Output(const real_T* u1, const real_T* u2);
        extern void TransferBlock_SimARM_wrapper_Terminate(void);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("TransferBlock_SimARM_wrapper", "source")
        %openfile cFile = "%<cFileName>.cpp"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "Wrapper.hpp"
        #include "SimFederate.hpp"

        %if IsModelReferenceSimTarget()
        extern "C" {
        %endif
        void TransferBlock_SimARM_wrapper_Start(void) {
            Start_Point_ModelARM();
        }
        %if IsModelReferenceSimTarget()
        }
        %endif

        %if IsModelReferenceSimTarget()
        extern "C" {
        %endif
        void TransferBlock_SimARM_wrapper_Output(const real_T* u1, const real_T* u2) {
            Output_Point_ModelARM((real_T*)(u1), (real_T*)(u2));
        }
        %if IsModelReferenceSimTarget()
        }
        %endif

        %if IsModelReferenceSimTarget()
        extern "C" {
        %endif
        void TransferBlock_SimARM_wrapper_Terminate(void) {
            Terminate_Point();
        }
        %if IsModelReferenceSimTarget()
        }
        %endif

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %if IsModelReferenceSimTarget()
            %<SLibAddToStaticSources("%<cFileName>.cpp")>
        %else
            %<LibAddToModelSources("%<cFileName>")>
        %endif
    %else
        %<LibAddToCommonIncludes("Wrapper.hpp")>
        %<LibAddToCommonIncludes("SimFederate.hpp")>
    %endif
    %<SLibAddToStaticSources("Wrapper.cpp")>
    %<SLibAddToStaticSources("SimFederate.cpp")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        TransferBlock_SimARM_wrapper_Start();
    %else
        %% 
        Start_Point_ModelARM();
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u2_ptr = LibBlockInputSignalAddr(1, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        TransferBlock_SimARM_wrapper_Output(%<u1_ptr>, %<u2_ptr>);
    %else
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u2_ptr = LibBlockInputSignalAddr(1, "", "", 0)
        %% 
        Output_Point_ModelARM((real_T*)%<u1_ptr>, (real_T*)%<u2_ptr>);
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        TransferBlock_SimARM_wrapper_Terminate();
    %else
        %% 
        Terminate_Point();
    %endif
%endfunction

%% [EOF]
